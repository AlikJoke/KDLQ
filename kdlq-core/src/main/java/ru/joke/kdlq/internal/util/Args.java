package ru.joke.kdlq.internal.util;

import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import java.util.Collection;
import java.util.Map;
import java.util.function.Supplier;

/**
 * Utility component for method argument validation.
 *
 * @author Alik
 */
public abstract class Args {

    /**
     * Ensures that the provided value is non-null. If the value is {@code null}, an exception
     * is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value; cannot be {@code null}.
     * @param <T> type of value
     */
    @Nonnull
    public static <T> T requireNotNull(
            final T value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value == null) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is not empty string. If the value is {@code null} or empty,
     * an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value; cannot be {@code null}.
     */
    @Nonnull
    public static String requireNotEmpty(
            final String value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value == null || value.isEmpty()) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is positive int. If the value is {@code <= 0},
     * an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value.
     */
    public static int requirePositive(
            final int value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value <= 0) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is non-negative int. If the value is {@code < 0},
     * an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value.
     */
    @Nonnegative
    public static int requireNonNegative(
            final int value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value < 0) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is non-negative long. If the value is {@code < 0},
     * an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value.
     */
    @Nonnegative
    public static long requireNonNegative(
            final long value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value < 0) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is not empty collection. If the value is {@code null}
     * or empty, an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value; cannot be {@code null}.
     */
    @Nonnull
    public static <T> Collection<T> requireNotEmpty(
            final Collection<T> value,
            @Nonnull final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value == null || value.isEmpty()) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    /**
     * Ensures that the provided value is not empty map. If the value is {@code null}
     * or empty, an exception is thrown, generated by the given {@link Supplier}.
     *
     * @param value             value to check.
     * @param exceptionSupplier exception supplier; cannot be {@code null}.
     * @return provided value; cannot be {@code null}.
     */
    @Nonnull
    public static <K, V> Map<K, V> requireNotEmpty(
            final Map<K, V> value,
            final Supplier<RuntimeException> exceptionSupplier
    ) {
        if (value == null || value.isEmpty()) {
            throw exceptionSupplier.get();
        }

        return value;
    }

    private Args() {}
}
